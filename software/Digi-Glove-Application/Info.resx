<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox_info.Text" xml:space="preserve">
    <value>The Digi-Glove is a controller that can both control the mouse and excecute configured macros...

How to configure a macro:
To create a macro press the "add macro" button under the configurations tab. A blank macro will appear where you enter a name, chose a trigger and enter the macro itself. 
A couple of rules:
-You cannot configure two macros with the same name.
-To create a macro for a shortcut you must include a + sign in the macro, ex.: ctrl+shift or prsc+.
-You can have the same trigger on multiple macros, but beware all those macros will excecute when the trigger happens.
Special Macros:
-'leftmouseclick'  		Left clicks a single time on the current mouse position
-'rightmouseclick'		Right clicks a single time on the current mouse position
-'disable' 			Disables all other macros and reenables if triggered again

All keys that work in the macros:
['\t',  '\n',  '\r',  ' ',  '!',  '"',  '#',  '$',  '&amp;',   "'",   '(',
')',   '*',   '+',   ',',   '-',   '.',   '/',   '0',   '1',   '2',   '3',   '4',   '5',   '6',   '7',
'8',   '9',   ':',   ';',   '&lt;',   '=',   '&gt;',   '?',   '@',   '[',   '\\',   ']',   '^',   '_',   '`',
'a',   'b',   'c',   'd',   'e',   'f',   'g',   'h',   'i',   'j',   'k',   'l',   'm',   'n',   'o',
'p',   'q',   'r',   's',   't',   'u',   'v',   'w',   'x',   'y',   'z',   '{',   '|',   '}', 
'accept',   'add',   'alt',   'altleft',   'altright',   'apps',   'backspace',
'browserback',   'browserfavorites',   'browserforward',   'browserhome',
'browserrefresh',   'browsersearch',   'browserstop',   'capslock',   'clear',
'convert',   'ctrl',   'ctrlleft',   'ctrlright',   'decimal',   'del',   'delete',
'divide',   'down',   'end',   'enter',   'esc',   'escape',   'execute',   'f1',   'f10',
'f11',   'f12',   'f13',   'f14',   'f15',   'f16',   'f17',   'f18',   'f19',   'f2',   'f20',
'f21',   'f22',   'f23',   'f24',   'f3',   'f4',   'f5',   'f6',   'f7',   'f8',   'f9',
'final',   'fn',   'hanguel',   'hangul',   'hanja',   'help',   'home',   'insert',   'junja',
'kana',   'kanji',   'launchapp1',   'launchapp2',   'launchmail',
'launchmediaselect',   'left',   'modechange',   'multiply',   'nexttrack',
'nonconvert',   'num0',   'num1',   'num2',   'num3',   'num4',   'num5',   'num6',
'num7',   'num8',   'num9',   'numlock',   'pagedown',   'pageup',   'pause',   'pgdn',
'pgup',   'playpause',   'prevtrack',   'print',   'printscreen',   'prntscrn',
'prtsc',   'prtscr',   'return',   'right',   'scrolllock',   'select',   'separator',
'shift',   'shiftleft',   'shiftright',   'sleep',   'space',   'stop',   'subtract',   'tab',
'up',   'volumedown',   'volumemute',   'volumeup',   'win',   'winleft',   'winright',   'yen',
'command',   'option',   'optionleft',   'optionright']


What are the triggers:
The triggers are the actions you make with the glove. Bend corresponds to the bending of set finger. Touch corresponds to touching something with said finger.

What is a macro:
A macro is a set of action that fires one after another together by the press of a single button, or in this case the movement of a finger.

Digi-Glove was created by:
-Elias Toivola (Hardware)
-Nisar Kainulainen (Hardware)
-Jaakko Ropponen (Hardware)
-Stef Martens (Software)
-Jan Boeckx (Software)
-Zeno Hattas (Software)
-Charlie Cramm (Software)
-Quinten Van Ginderen (Software)</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button_title_calibration.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAA+gAAAABCAIAAADCYhNkAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        wwAADsMBx2+oZAAAACBJREFUSEvtwkERAAAIAyDz2nYJVsUaPuCYTVVV1dfTAwcKNglC8UVoAAAAAElF
        TkSuQmCC
</value>
  </data>
</root>